{"ast":null,"code":"import \"antd-mobile/es/tab-bar/style\";\nimport _TabBar from \"antd-mobile/es/tab-bar\";\nvar _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/components/nav-footer/nav-footer.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nconst Item = _TabBar.Item; //底部容器\n\nclass NavFooter extends Component {\n  render() {\n    let _this$props = this.props,\n        navList = _this$props.navList,\n        unReadCount = _this$props.unReadCount; //过滤掉hide为true的nav\n\n    navList = navList.filter(nav => !nav.hide);\n    const path = this.props.location.pathname; //路由组件才有这个写法，这个组件是路由组件，因此path不能用这个方式获取\n    //希望在非路由组件中使用路由库的api，可以使用路由组件库的一个函数withRoute()，\n    //对当前组件进行包装，返回包装后的组件\n\n    return React.createElement(_TabBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, navList.map(nav => React.createElement(Item, {\n      key: nav.path,\n      badge: nav.path === \"/message\" ? unReadCount : 0,\n      title: nav.text,\n      icon: {\n        uri: require(\"./images/\".concat(nav.icon, \".png\"))\n      } //第一层{}表示要写js表达式，第二层{}表示要写对象，``表示写的是一个模版字符串\n      ,\n      selectedIcon: {\n        uri: require(\"./images/\".concat(nav.icon, \"-selected.png\"))\n      },\n      selected: path === nav.path,\n      onPress: () => this.props.history.replace(nav.path),\n      tabBarPosition: \"bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })));\n  }\n\n} //内部会向组件中传入一些路由组件特有的属性：history/location/math\n\n\nNavFooter.propTypes = {\n  navList: PropTypes.array.isRequired,\n  unReadCount: PropTypes.number.isRequired\n};\nexport default withRouter(NavFooter); //向外暴露withRouter()包装产生的组件","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/components/nav-footer/nav-footer.jsx"],"names":["React","Component","PropTypes","withRouter","Item","NavFooter","render","props","navList","unReadCount","filter","nav","hide","path","location","pathname","map","text","uri","require","icon","history","replace","propTypes","array","isRequired","number"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,IAAI,GAAG,QAAOA,IAApB,C,CAEA;;AACA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAiC;AAKhCK,EAAAA,MAAM,GAAE;AAAA,sBACwB,KAAKC,KAD7B;AAAA,QACDC,OADC,eACDA,OADC;AAAA,QACQC,WADR,eACQA,WADR,EAEP;;AACAD,IAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAeC,GAAG,IAAI,CAACA,GAAG,CAACC,IAA3B,CAAV;AACA,UAAMC,IAAI,GAAG,KAAKN,KAAL,CAAWO,QAAX,CAAoBC,QAAjC,CAJO,CAIoC;AAC3C;AACA;;AACA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCP,OAAO,CAACQ,GAAR,CAAaL,GAAD,IACZ,oBAAC,IAAD;AAAQ,MAAA,GAAG,EAAEA,GAAG,CAACE,IAAjB;AACE,MAAA,KAAK,EAAEF,GAAG,CAACE,IAAJ,KAAW,UAAX,GAAsBJ,WAAtB,GAAkC,CAD3C;AAEE,MAAA,KAAK,EAAEE,GAAG,CAACM,IAFb;AAGE,MAAA,IAAI,EAAE;AAACC,QAAAA,GAAG,EAACC,OAAO,oBAAaR,GAAG,CAACS,IAAjB;AAAZ,OAHR,CAIE;AAJF;AAKE,MAAA,YAAY,EAAE;AAACF,QAAAA,GAAG,EAACC,OAAO,oBAAaR,GAAG,CAACS,IAAjB;AAAZ,OALhB;AAME,MAAA,QAAQ,EAAGP,IAAI,KAAKF,GAAG,CAACE,IAN1B;AAOE,MAAA,OAAO,EAAE,MAAI,KAAKN,KAAL,CAAWc,OAAX,CAAmBC,OAAnB,CAA2BX,GAAG,CAACE,IAA/B,CAPf;AAQE,MAAA,cAAc,EAAC,QARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADD,CADD;AAeA;;AA3B+B,C,CA8BjC;;;AA9BMR,S,CACEkB,S,GAAY;AAClBf,EAAAA,OAAO,EAAEN,SAAS,CAACsB,KAAV,CAAgBC,UADP;AAElBhB,EAAAA,WAAW,EAAEP,SAAS,CAACwB,MAAV,CAAiBD;AAFZ,C;AA8BpB,eAAetB,UAAU,CAACE,SAAD,CAAzB,C,CAAsC","sourcesContent":["import React, { Component } from \"react\";\nimport { TabBar } from \"antd-mobile\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\n\nconst Item = TabBar.Item\n\n//底部容器\nclass NavFooter extends Component{\n\tstatic propTypes = {\n\t\tnavList: PropTypes.array.isRequired,\n\t\tunReadCount: PropTypes.number.isRequired\n\t}\n\trender(){\n\t\tlet { navList, unReadCount } = this.props;\n\t\t//过滤掉hide为true的nav\n\t\tnavList = navList.filter(nav => !nav.hide)\n\t\tconst path = this.props.location.pathname; //路由组件才有这个写法，这个组件是路由组件，因此path不能用这个方式获取\n\t\t//希望在非路由组件中使用路由库的api，可以使用路由组件库的一个函数withRoute()，\n\t\t//对当前组件进行包装，返回包装后的组件\n\t\treturn (\n\t\t\t<TabBar>{ \n\t\t\t\tnavList.map((nav) => (\n\t\t\t\t<Item   key={nav.path}\n\t\t\t\t\t\tbadge={nav.path===\"/message\"?unReadCount:0}\n\t\t\t\t\t\ttitle={nav.text}\n\t\t\t\t\t\ticon={{uri:require(`./images/${nav.icon}.png`)}} \n\t\t\t\t\t\t//第一层{}表示要写js表达式，第二层{}表示要写对象，``表示写的是一个模版字符串\n\t\t\t\t\t\tselectedIcon={{uri:require(`./images/${nav.icon}-selected.png`)}}\n\t\t\t\t\t\tselected={ path === nav.path}\n\t\t\t\t\t\tonPress={()=>this.props.history.replace(nav.path)}\n\t\t\t\t\t\ttabBarPosition=\"bottom\"></Item>\n\t\t\t\t)\n\t\t\t)\n\t\t}</TabBar>)\n\t}\n}\n\n//内部会向组件中传入一些路由组件特有的属性：history/location/math\nexport default withRouter(NavFooter); //向外暴露withRouter()包装产生的组件"]},"metadata":{},"sourceType":"module"}
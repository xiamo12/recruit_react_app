{"ast":null,"code":"import \"antd-mobile/es/grid/style\";\nimport _Grid from \"antd-mobile/es/grid\";\nimport \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nimport \"antd-mobile/es/icon/style\";\nimport _Icon from \"antd-mobile/es/icon\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/containers/chat/chat.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../assets/css/index.less';\nimport { sendMsg, readMsg } from \"../../redux/actions\"; // import QueueAnim from \"rc-queue-anim\";\n\nconst Item = _List.Item; //聊天界面路由容器\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      content: '',\n      isShow: false\n    };\n\n    this.toggleShow = () => {\n      const isShow = !this.state.isShow; //切换状态，即对当前状态取反、\n\n      this.setState({\n        isShow\n      });\n\n      if (isShow) {\n        //异步手动派发resize事件，解决表情列表显示的bug\n        setTimeout(() => {\n          window.dispatchEvent(new Event('resize'));\n        }, 0);\n      }\n    };\n\n    this.handleSend = () => {\n      //需要content、from、to三个信息\n      const from = this.props.user._id;\n      const to = this.props.match.params.userid;\n      const content = this.state.content.trim(); //发送请求（发消息）\n\n      if (content) {\n        this.props.sendMsg({\n          from,\n          to,\n          content\n        });\n      } //清除输入数据\n\n\n      this.setState({\n        content: '',\n        isShow: false\n      });\n    };\n\n    this.onkeydown = e => {\n      if (e.keyCode === 13) {\n        this.handleSend();\n      }\n    };\n  }\n\n  componentWillMount() {\n    //在第一次render执行之前回调，在此初始化表情列表数据\n    const emojis = ['😉', '😊', '😇', '🥰', '😍', '🤩', '😘', '😗', '😚', '😙', '😋', '😛', '😝', '🤑', '🤗', '🤭', '🤫', '🤔', '🤐', '🤨', '😐', '😑', '😶', '😏', '😒', '🙄', '😬', '🤥', '🤒', '🤕', '🤢', '🤮', '🤧', '🥵', '🥶', '🥴', '😵', '🤯', '🤠', '🥳']; //要求该数组里的元素是对象，对象有一个text属性，text属性的值是表情。\n\n    this.emojis = emojis.map(emoji => ({\n      text: emoji\n    }));\n  }\n\n  conponentDidMount() {\n    window.scrollTo(0, document.body.scrollHeight); //初始化显示聊天列表，使页面滑动到底部\n  }\n\n  componentDidUpdate() {\n    window.scrollTo(0, document.body.scrollHeight); //更新显示列表\n\n    document.addEventListener('keydown', this.onkeydown);\n  }\n\n  componentWillUnmount() {\n    //在退出聊天界面【也就是当前组件】之前执行\n    //发请求更新消息的未读状态\n    const from = this.props.match.params.userid;\n    const to = this.props.user._id;\n    this.props.readMsg(from, to); //读了消息，那么读了谁的消息？就需要知道目标：to\n  }\n\n  render() {\n    const user = this.props.user;\n    const _this$props$chat = this.props.chat,\n          users = _this$props$chat.users,\n          chatMsgs = _this$props$chat.chatMsgs; //此处chatMsgs 包含的是“我”和所有列表用户的聊天记录，而需要的只是和当前用户的聊天记录，因此需要对chatMsgs进行过滤，过滤根据chat_id来过滤\n    //计算当前聊天的chat_id\n\n    const meId = user._id; //用户端的id\n\n    if (!users[meId]) {\n      //如果还没有获取到数据，就不做任何显示。users一定用户值，chatMsgs可能没值\n      return null;\n    }\n\n    const targetId = this.props.match.params.userid; //当前目标的id\n\n    const chatId = [targetId, meId].sort().join('_'); //对chatMsg进行过滤\n\n    const msgs = chatMsgs.filter(msg => msg.chat_id === chatId); //msgs可能是我发给对方，也可能是对方发给我\n    //得到目标用户头像header图片对象\n\n    const targetHeader = users[targetId].header; //users初始值是空对象\n\n    const targetIcon = targetHeader ? require(\"../../assets/images/\".concat(targetHeader, \".png\")) : null;\n    const myHeader = users[meId].header;\n    const meIcon = myHeader ? require(\"../../assets/images/\".concat(myHeader, \".png\")) : null;\n    return React.createElement(\"div\", {\n      id: \"chat-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(_NavBar, {\n      icon: React.createElement(_Icon, {\n        type: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }),\n      className: \"sticky-header\",\n      onLeftClick: () => this.props.history.goBack() //点击返回按钮，执行回调函数\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, users[targetId].username), React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, msgs.map(msg => {\n      if (targetId === msg.from) {\n        //对方发消息过来,返回左边的标签\n        return React.createElement(Item, {\n          key: msg._id,\n          thumb: targetIcon,\n          wrap: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, msg.content); //头像只需要加载一次就行了\n      } else {\n        //此端发消息,返回右边的标签\n        return React.createElement(Item, {\n          key: msg._id,\n          className: \"chat-me\",\n          extra: React.createElement(\"img\", {\n            src: meIcon,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }),\n          wrap: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, msg.content);\n      }\n    })), React.createElement(\"div\", {\n      className: \"am-tab-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(_InputItem, {\n      style: {\n        zIndex: -10\n      },\n      autoFocus: true,\n      placeholder: \"\\u8BF4\\u70B9\\u4EC0\\u4E48...\",\n      value: this.state.content,\n      onChange: val => this.setState({\n        content: val\n      }),\n      onFocus: () => this.setState({\n        isShow: false\n      }),\n      extra: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: this.toggleShow,\n        role: \"img\",\n        \"aria-label\": \"laugh\",\n        style: {\n          cursor: \"pointer\",\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"\\uD83D\\uDE0D\"), React.createElement(\"span\", {\n        onClick: this.handleSend,\n        onKeyDown: e => this.onkeydown(e),\n        style: {\n          cursor: \"pointer\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"\\u53D1\\u9001\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), this.state.isShow ? React.createElement(_Grid, {\n      itemStyle: {},\n      data: this.emojis //data是一个数组，含有icon、text两个属性\n      ,\n      columnNum: 8,\n      carouselMaxRow: 3,\n      isCarousel: true,\n      onClick: item => {\n        this.setState({\n          content: this.state.content + item.text\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), {\n  sendMsg,\n  readMsg\n})(Chat);","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/containers/chat/chat.jsx"],"names":["React","Component","connect","sendMsg","readMsg","Item","Chat","state","content","isShow","toggleShow","setState","setTimeout","window","dispatchEvent","Event","handleSend","from","props","user","_id","to","match","params","userid","trim","onkeydown","e","keyCode","componentWillMount","emojis","map","emoji","text","conponentDidMount","scrollTo","document","body","scrollHeight","componentDidUpdate","addEventListener","componentWillUnmount","render","chat","users","chatMsgs","meId","targetId","chatId","sort","join","msgs","filter","msg","chat_id","targetHeader","header","targetIcon","require","myHeader","meIcon","history","goBack","username","marginTop","marginBottom","zIndex","val","cursor","marginRight","item"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavBar, List, InputItem, Grid, Icon } from \"antd-mobile\";\nimport '../../assets/css/index.less';\nimport { sendMsg,readMsg } from \"../../redux/actions\";\n\n// import QueueAnim from \"rc-queue-anim\";\n\nconst Item = List.Item;\n\n//聊天界面路由容器\nclass Chat extends Component{\n\tstate = {\n\t\tcontent: '',\n\t\tisShow: false\n\t}\n\n\tcomponentWillMount(){ //在第一次render执行之前回调，在此初始化表情列表数据\n\t\tconst emojis = ['😉', '😊', '😇', '🥰', '😍', '🤩', '😘', '😗', '😚', \n\t\t'😙','😋', '😛','😝', '🤑', '🤗','🤭', '🤫','🤔', '🤐','🤨','😐','😑',\n\t\t'😶','😏','😒','🙄','😬','🤥','🤒', '🤕','🤢','🤮','🤧','🥵','🥶','🥴',\n\t\t'😵','🤯', '🤠','🥳'] //要求该数组里的元素是对象，对象有一个text属性，text属性的值是表情。\n\t\tthis.emojis = emojis.map(emoji => ({text: emoji}));\n\t}\n\tconponentDidMount(){\n\t\twindow.scrollTo(0, document.body.scrollHeight);//初始化显示聊天列表，使页面滑动到底部\n\t}\n\tcomponentDidUpdate(){\n\t\twindow.scrollTo(0, document.body.scrollHeight); //更新显示列表\n\t\tdocument.addEventListener('keydown', this.onkeydown)\n\n\t}\n\tcomponentWillUnmount(){ //在退出聊天界面【也就是当前组件】之前执行\n\t//发请求更新消息的未读状态\n\t\tconst from = this.props.match.params.userid;\n\t\tconst to = this.props.user._id\n\t\tthis.props.readMsg(from, to) //读了消息，那么读了谁的消息？就需要知道目标：to\n\t}\n\n\ttoggleShow =()=>{\n\t\tconst isShow = !this.state.isShow; //切换状态，即对当前状态取反、\n\t\tthis.setState({isShow});\n\t\tif (isShow) {\n\t\t\t//异步手动派发resize事件，解决表情列表显示的bug\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.dispatchEvent(new Event('resize'))\n\t\t\t}, 0);\n\t\t} \n\t}\n\thandleSend = ()=>{ //需要content、from、to三个信息\n\t\tconst from = this.props.user._id;\n\t\tconst to = this.props.match.params.userid;\n\t\tconst content = this.state.content.trim()\n\t\t//发送请求（发消息）\n\t\tif (content) {\n\t\t\tthis.props.sendMsg({from, to, content});\n\t\t}\n\t\t//清除输入数据\n\t\tthis.setState({\n\t\t\tcontent: '',\n\t\t\tisShow: false})\n\t}\n\tonkeydown = (e) => {\n\t\tif (e.keyCode === 13) {\n\t\t\tthis.handleSend()\n\t\t}\n\t}\n\trender(){\n\t\tconst { user } = this.props;\n\t\tconst { users, chatMsgs } = this.props.chat //此处chatMsgs 包含的是“我”和所有列表用户的聊天记录，而需要的只是和当前用户的聊天记录，因此需要对chatMsgs进行过滤，过滤根据chat_id来过滤\n\t\t//计算当前聊天的chat_id\n\t\tconst meId = user._id; //用户端的id\n\n\t\tif (!users[meId]) {//如果还没有获取到数据，就不做任何显示。users一定用户值，chatMsgs可能没值\n\t\t\treturn null\n\t\t}\n\t\t\n\t\tconst targetId = this.props.match.params.userid //当前目标的id\n\t\tconst chatId = [targetId, meId].sort().join('_')\n\n\t\t//对chatMsg进行过滤\n\t\tconst msgs = chatMsgs.filter(msg => msg.chat_id === chatId);//msgs可能是我发给对方，也可能是对方发给我\n\t\t\n\t\t//得到目标用户头像header图片对象\n\t\tconst targetHeader = users[targetId].header; //users初始值是空对象\n\t\tconst targetIcon = targetHeader ? require(`../../assets/images/${targetHeader}.png`) : null;\n\n\t\tconst myHeader = users[meId].header;\n\t\tconst meIcon = myHeader ? require(`../../assets/images/${myHeader}.png`) : null;\n\t\treturn (\n\t\t\t<div id=\"chat-page\">\n\t\t\t\t<NavBar \n\t\t\t\ticon={<Icon type=\"left\"/>} \n\t\t\t\tclassName=\"sticky-header\"\n\t\t\t\tonLeftClick={()=>this.props.history.goBack()} //点击返回按钮，执行回调函数\n\t\t\t\t>{users[targetId].username}</NavBar>\n\t\t\t\t<List style={{marginTop:50, marginBottom:50}}>\n\t\t\t\t{/*alpha left right top bottom scale scaleBig scaleX scaleY*/}\n\t\t\t\t\t{msgs.map(msg => {\n\t\t\t\t\tif (targetId === msg.from) { //对方发消息过来,返回左边的标签\n\t\t\t\t\t\treturn <Item key={msg._id} thumb={targetIcon} wrap={true}>{msg.content}</Item>//头像只需要加载一次就行了\n\t\t\t\t\t}else{ //此端发消息,返回右边的标签\n\t\t\t\t\t\treturn <Item key={msg._id} className=\"chat-me\" extra={<img src={meIcon}/>} wrap={true}>{msg.content}</Item>\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t\t</List>\n\t\t\t\t<div className=\"am-tab-bar\">\n\t\t\t\t<InputItem \n\t\t\t\tstyle={{zIndex: -10}}\n\t\t\t\tautoFocus\n\t\t\t\tplaceholder=\"说点什么...\" \n\t\t\t\tvalue={this.state.content}\n\t\t\t\tonChange={val => this.setState({content: val})}\n\t\t\t\tonFocus={()=>this.setState({isShow:false})}\n\t\t\t\textra={\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<span onClick={this.toggleShow} role=\"img\" aria-label=\"laugh\" style={{cursor: \"pointer\", marginRight:10}}>😍</span>\n\t\t\t\t\t\t<span onClick={this.handleSend} onKeyDown={(e)=> this.onkeydown(e)} style={{cursor: \"pointer\"}}>发送</span>\n\t\t\t\t\t</span>} \n\t\t\t\t\t/>\n\t\t\t\t\t{this.state.isShow ? (<Grid \n\t\t\t\t\t\titemStyle={{}}\n\t\t\t\t\t\tdata={this.emojis} //data是一个数组，含有icon、text两个属性\n\t\t\t\t\t\tcolumnNum={8}\n\t\t\t\t\t\tcarouselMaxRow={3}\n\t\t\t\t\t\tisCarousel={true}\n\t\t\t\t\t\tonClick={(item) => {this.setState({content: this.state.content + item.text})}}/>) : null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\nexport default connect(\n\tstate => ({user: state.user, chat:state.chat}),\n\t{sendMsg, readMsg}\n\t)(Chat)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
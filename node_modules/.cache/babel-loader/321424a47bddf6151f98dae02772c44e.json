{"ast":null,"code":"import \"antd-mobile/es/wing-blank/style\";\nimport _WingBlank from \"antd-mobile/es/wing-blank\";\nimport \"antd-mobile/es/button/style\";\nimport _Button from \"antd-mobile/es/button\";\nimport \"antd-mobile/es/radio/style\";\nimport _Radio from \"antd-mobile/es/radio\";\nimport \"antd-mobile/es/input-item/style\";\nimport _InputItem from \"antd-mobile/es/input-item\";\nimport \"antd-mobile/es/white-space/style\";\nimport _WhiteSpace from \"antd-mobile/es/white-space\";\nimport \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/containers/register/register.jsx\";\n// 注册路由组件\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { register } from \"../../redux/actions\";\nimport Logo from \"../../components/logo/logo\";\nimport { Redirect } from \"react-router-dom\"; //渲染Redirect标签可实现自动重定向\n\nconst ListItem = _List.Item;\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      //用户名\n      password: \"\",\n      //密码\n      password2: \"\",\n      //确认密码\n      type: \"dashen\" //用户类型\n      //点击注册，调用actions里的register方法\n\n    };\n\n    this.register = () => {\n      //定义在redux/actions/register.js里的方法\n      // console.log(this.state)\n      this.props.register(this.state); //包含了username、password、password2、type四个数据。\n    };\n\n    this.handleChange = (name, val) => {\n      this.setState({\n        [name]: val //动态写法。属性名不是name，而是name的值。用中括号装起来，它就是一个变量，否则是一个字符串。\n\n      });\n    };\n\n    this.toLogin = () => {\n      this.props.history.replace('/login');\n    };\n  }\n\n  render() {\n    const type = this.state.type;\n    const _this$props$user = this.props.user,\n          msg = _this$props$user.msg,\n          redirectTo = _this$props$user.redirectTo; //如果redirectTo有值，则需要重定向到指定的地址中去\n\n    if (redirectTo) {\n      return React.createElement(Redirect, {\n        to: redirectTo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(_NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"\\u590F\\xA0\\u672B\"), React.createElement(Logo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(_WingBlank, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(_WhiteSpace, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(_List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, msg ? React.createElement(\"div\", {\n      className: \"error-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, msg) : null, React.createElement(_InputItem, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D\",\n      onChange: val => {\n        this.handleChange(\"username\", val);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"\\u7528\\u6237\\u540D\\uFF1A\"), React.createElement(_InputItem, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u5BC6\\u7801\",\n      type: \"password\",\n      onChange: val => {\n        this.handleChange(\"password\", val);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"\\u5BC6\\xA0\\xA0\\xA0\\u7801\\uFF1A\"), React.createElement(_InputItem, {\n      placeholder: \"\\u6821\\u9A8C\\u5BC6\\u7801\",\n      type: \"password\",\n      onChange: val => {\n        this.handleChange(\"password2\", val);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"\\u786E\\u8BA4\\u5BC6\\u7801\\uFF1A\"), React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"\\u7528\\u6237\\u7C7B\\u578B\\uFF1A\\xA0\\xA0\"), React.createElement(_Radio, {\n      checked: type === \"dashen\",\n      onClick: () => this.handleChange(\"type\", \"dashen\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"\\u5927\\u795E \\xA0\\xA0\\xA0\"), React.createElement(_Radio, {\n      checked: type === \"laoban\",\n      onClick: () => this.handleChange(\"type\", \"laoban\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"\\u8001\\u677F\")), React.createElement(_WhiteSpace, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      onClick: this.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"\\u6CE8\\u518C\"), React.createElement(_Button, {\n      onClick: this.toLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"\\u5DF2\\u6709\\u8D26\\u6237\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.props.store.getState()))));\n  }\n\n}\n\nexport default connect( //包装容器组件，传入注册函数register\nstate => ({\n  user: state.user\n}), //{}里指定要传的数据。组件读取状态值，当注册成功时成功跳转；失败时在注册列表上方出现提示信息。\n{\n  register //向UI组件Register传递了一个register函数\n\n})(Register); // export default Register;","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/containers/register/register.jsx"],"names":["React","Component","connect","register","Logo","Redirect","ListItem","Item","Register","state","username","password","password2","type","props","handleChange","name","val","setState","toLogin","history","replace","render","user","msg","redirectTo","store","getState"],"mappings":"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","sourcesContent":["// 注册路由组件\n\nimport React,{ Component } from \"react\";\nimport { \n  NavBar, \n  WingBlank, \n  WhiteSpace,\n  List, \n  InputItem,\n  Radio,\n  Button } from \"antd-mobile\";\n\nimport { connect } from \"react-redux\";\nimport {register} from \"../../redux/actions\";\nimport Logo from \"../../components/logo/logo\";\nimport { Redirect } from \"react-router-dom\"; //渲染Redirect标签可实现自动重定向\n\nconst ListItem = List.Item;\n\nclass Register extends Component{ //Register组件是一个UI组件，不能直接跟redux进行交互\n  state = {\n    username: \"\", //用户名\n    password: \"\", //密码\n    password2: \"\", //确认密码\n    type: \"dashen\" //用户类型\n  }\n  //点击注册，调用actions里的register方法\n  register = ()=>{ //定义在redux/actions/register.js里的方法\n    // console.log(this.state)\n    this.props.register(this.state)//包含了username、password、password2、type四个数据。\n  }\n\n\n  //处理输入数据的改变，更新对应的状态\n  handleChange = (name,val)=>{\n    this.setState({\n      [name] : val //动态写法。属性名不是name，而是name的值。用中括号装起来，它就是一个变量，否则是一个字符串。\n    })\n  }\n\n  toLogin = ()=>{\n    this.props.history.replace('/login');\n  }\n\n\n  render(){\n    const { type } = this.state;\n    const { msg, redirectTo } = this.props.user;\n    //如果redirectTo有值，则需要重定向到指定的地址中去\n    if (redirectTo) {\n      return <Redirect to={redirectTo}></Redirect>\n    }\n    return <div>\n      <NavBar>夏&nbsp;末</NavBar>\n      <Logo />\n      <WingBlank>\n      <WhiteSpace/>\n        <List>\n        {msg ? <div className=\"error-msg\">{msg}</div> : null}\n          <InputItem placeholder=\"请输入用户名\" onChange={ val =>{this.handleChange(\"username\", val)} }>用户名：</InputItem>\n          <InputItem placeholder=\"请输入密码\" type=\"password\" onChange={ val =>{this.handleChange(\"password\", val)} }>密&nbsp;&nbsp;&nbsp;码：</InputItem>\n          <InputItem placeholder=\"校验密码\" type=\"password\" onChange={ val =>{this.handleChange(\"password2\", val)} }>确认密码：</InputItem>\n          <ListItem>\n            <span>用户类型：&nbsp;&nbsp;</span>\n            <Radio checked={type === \"dashen\"} onClick={()=>this.handleChange(\"type\",\"dashen\")}>大神\n            &nbsp;&nbsp;&nbsp;</Radio>\n            <Radio checked={type === \"laoban\"} onClick={()=>this.handleChange(\"type\",\"laoban\")}>老板</Radio>\n          </ListItem>\n          <WhiteSpace/>\n          <Button type=\"primary\" onClick={this.register}>注册</Button>\n          <Button onClick={this.toLogin}>已有账户</Button>\n          <span>{this.props.store.getState()}</span>\n        </List>\n      </WingBlank>\n    </div>\n  }\n}\n\nexport default connect( //包装容器组件，传入注册函数register\n  state => ({user: state.user}), //{}里指定要传的数据。组件读取状态值，当注册成功时成功跳转；失败时在注册列表上方出现提示信息。\n  {register} //向UI组件Register传递了一个register函数\n  )(Register);\n\n\n// export default Register;\n\n\n"]},"metadata":{},"sourceType":"module"}
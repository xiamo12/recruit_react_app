{"ast":null,"code":"import \"antd-mobile/es/badge/style\";\nimport _Badge from \"antd-mobile/es/badge\";\nimport \"antd-mobile/es/list/style\";\nimport _List from \"antd-mobile/es/list\";\nvar _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/containers/message/message.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nconst Item = _List.Item;\nconst Brief = Item.Brief; //消息界面路由容器\n\nfunction getLastMsgs(chatMsgs, userid) {\n  //功能函数：根据与某个人聊天的chat_id,对chatMsgs进行分组，\n  //得到每个组的lastMsg组成的数组\n  //1.找出每个聊天的lastMsg，并用一个对象容器来保存{chat_id:lastMsg}\n  const lastMsgObjs = {}; //准备一个空容器\n\n  chatMsgs.forEach(msg => {\n    //往msg上加unReadCount属性。unReadCount是别人发给“我”的未读消息\n    //对mdg的个体进行统计\n    if (msg.to === userid && !msg.read) {\n      msg.unReadCount = 1;\n    } else {\n      msg.unReadCount = 0;\n    }\n\n    const chatId = msg.chat_id; //得到msg聊天标识id\n\n    const lastMsg = lastMsgObjs[chatId]; //获取已保存的当前组件的lastMsg\n\n    if (!lastMsg) {\n      //当前msg就是所在组的lastMsg\n      lastMsgObjs[chatId] = msg;\n    } else {\n      //如果msg比lastMsg晚，就讲msg保存为lastMsg\n      //累加unReadCount = 已经统计的 + 当前msg的\n      const unReadCount = lastMsg.unReadCount + msg.unReadCount;\n\n      if (msg.create_time > lastMsg.create_time) {\n        lastMsgObjs[chatId] = msg; //将msg赋值给lastMsg之后，要关联到lastMsgObjs中\n      } //累加unReadCount，并保存在最新的lastMsg上:lastMsgObjs[chatId]表示罪行的lastMsg\n\n\n      lastMsgObjs[chatId].unReadCount = unReadCount;\n    }\n  }); //2.得到所有lastMsg的数组\n\n  const lastMsgs = Object.values(lastMsgObjs); //values返回的数组指定是哪个对象\n  //3.对数组根据create_time进行降序排序\n\n  lastMsgs.sort(function (m1, m2) {\n    //传入sort一个排序函数，如果结果小于0，将m1放在前面；为0顺序不变；大于0m2在前面\n    return m2.create_time - m1.create_time; //如果此值小于0，那么m1在前面\n  });\n  console.log(lastMsgs);\n  return lastMsgs;\n}\n\nclass Message extends Component {\n  render() {\n    const user = this.props.user; //user是“我”\n\n    const _this$props$chat = this.props.chat,\n          users = _this$props$chat.users,\n          chatMsgs = _this$props$chat.chatMsgs; //“users”\n\n    const lastMsgs = getLastMsgs(chatMsgs, user._id);\n    return React.createElement(_List, {\n      style: {\n        marginTop: 50,\n        marginBottom: 55\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, lastMsgs.map(msg => {\n      //得到目标用户id\n      const targetUserId = msg.to === user._id ? msg.from : msg.to; //得到目标用户的信息\n\n      const targetUser = users[targetUserId];\n      return React.createElement(Item, {\n        key: msg._id,\n        extra: React.createElement(_Badge, {\n          text: msg.unReadCount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }),\n        thumb: targetUser.header ? require(\"../../assets/images/\".concat(targetUser.header, \".png\")) : null,\n        arrow: \"horizontal\",\n        onClick: () => this.props.history.push(\"/chat/\".concat(targetUserId)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, msg.content, React.createElement(Brief, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, targetUser.username));\n    }));\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  chat: state.chat\n}), //需要的数据：当前用户名，当前聊天信息\n{})(Message);","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/containers/message/message.jsx"],"names":["React","Component","connect","Item","Brief","getLastMsgs","chatMsgs","userid","lastMsgObjs","forEach","msg","to","read","unReadCount","chatId","chat_id","lastMsg","create_time","lastMsgs","Object","values","sort","m1","m2","console","log","Message","render","user","props","chat","users","_id","marginTop","marginBottom","map","targetUserId","from","targetUser","header","require","history","push","content","username","state"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { List, Badge } from \"antd-mobile\"\n\nconst Item = List.Item;\nconst Brief = Item.Brief\n//消息界面路由容器\n\n\n\nfunction getLastMsgs(chatMsgs, userid){\n\t//功能函数：根据与某个人聊天的chat_id,对chatMsgs进行分组，\n\t//得到每个组的lastMsg组成的数组\n\t//1.找出每个聊天的lastMsg，并用一个对象容器来保存{chat_id:lastMsg}\n\tconst lastMsgObjs = {} //准备一个空容器\n\tchatMsgs.forEach(msg => {\n\t\t//往msg上加unReadCount属性。unReadCount是别人发给“我”的未读消息\n\t\t\n\t\t//对mdg的个体进行统计\n\t\tif (msg.to === userid && !msg.read) {\n\t\t\tmsg.unReadCount = 1\n\t\t}else{\n\t\t\tmsg.unReadCount = 0\n\t\t}\n\n\n\t\tconst chatId = msg.chat_id; //得到msg聊天标识id\n\t\tconst lastMsg = lastMsgObjs[chatId];//获取已保存的当前组件的lastMsg\n\t\tif (!lastMsg) {//当前msg就是所在组的lastMsg\n\t\t\tlastMsgObjs[chatId] = msg\n\t\t}else{//如果msg比lastMsg晚，就讲msg保存为lastMsg\n\t\t\t//累加unReadCount = 已经统计的 + 当前msg的\n\t\t\tconst unReadCount = lastMsg.unReadCount + msg.unReadCount;\n\t\t\tif (msg.create_time > lastMsg.create_time) {\n\t\t\t\tlastMsgObjs[chatId] = msg; //将msg赋值给lastMsg之后，要关联到lastMsgObjs中\n\t\t\t}\n\t\t\t//累加unReadCount，并保存在最新的lastMsg上:lastMsgObjs[chatId]表示罪行的lastMsg\n\t\t\tlastMsgObjs[chatId].unReadCount = unReadCount\n\t\t}\n\t})\n\t//2.得到所有lastMsg的数组\n\tconst lastMsgs = Object.values(lastMsgObjs)//values返回的数组指定是哪个对象\n\t//3.对数组根据create_time进行降序排序\n\tlastMsgs.sort(function(m1,m2){//传入sort一个排序函数，如果结果小于0，将m1放在前面；为0顺序不变；大于0m2在前面\n\t\treturn  m2.create_time - m1.create_time; //如果此值小于0，那么m1在前面\n\t})\n\tconsole.log(lastMsgs)\n\treturn lastMsgs\n}\n\n\nclass Message extends Component{\n\trender(){\n\t\tconst { user } = this.props; //user是“我”\n\t\tconst { users, chatMsgs } =this.props.chat; //“users”\n\t\tconst lastMsgs = getLastMsgs(chatMsgs, user._id)\n\n\n\t\treturn (\n\t\t\t<List style={{marginTop: 50, marginBottom: 55}}>\n\t\t\t{\n\t\t\t\tlastMsgs.map(msg => {\n\t\t\t\t\t//得到目标用户id\n\t\t\t\t\tconst targetUserId = msg.to === user._id ? msg.from : msg.to;\n\t\t\t\t\t//得到目标用户的信息\n\t\t\t\t\tconst targetUser = users[targetUserId]\n\t\t\t\t\treturn (\n\t\t\t\t\t<Item \n\t\t\t\t\t\tkey={msg._id}\n\t\t\t\t\t\textra={<Badge text={msg.unReadCount} />}\n\t\t\t\t\t\tthumb={targetUser.header ? require(`../../assets/images/${targetUser.header}.png`) : null} \n\t\t\t\t\t\tarrow=\"horizontal\"\n\t\t\t\t\t\tonClick={ ()=> this.props.history.push(`/chat/${targetUserId}`)}>\n\t\t\t\t\t\t{msg.content}\n\t\t\t\t\t\t<Brief>{targetUser.username}</Brief>\n\t\t\t\t\t</Item>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t\t</List>\n\t\t\t)\n\t}\n}\n\nexport default connect(\n\tstate => ({user:state.user, chat:state.chat}), //需要的数据：当前用户名，当前聊天信息\n\t{}\n\t)(Message)"]},"metadata":{},"sourceType":"module"}
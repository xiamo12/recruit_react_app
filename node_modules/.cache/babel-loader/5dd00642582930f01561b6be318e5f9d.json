{"ast":null,"code":"var _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/index.js\";\n//入口js文件\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\"; //引入路由\n\nimport Register from \"./containers/register/register\";\nimport Main from \"./containers/main/main\";\nimport Login from \"./containers/login/login\";\nimport { Provider } from \"react-redux\"; //引入redux\n\nimport store from \"./redux/store\"; // import { PropTypes } from \"prop-types\";\n\nimport \"./assets/css/index.less\"; //有两个子组件都需要这个样式，所以写在这里。\n// import \"./test/socketio_test\"; //项目入口文件引入\n//Provider组件只是一个普通的组件。\n//它只需要接受store属性作为参数。它可以作为一个顶层的app容器，将state分发给下面所有被connect的组件。\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, console.log(store.getState())), React.createElement(HashRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/register\",\n  component: Register,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/login\",\n  component: Login,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}), React.createElement(Route, {\n  component: Main,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n})))), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/index.js"],"names":["React","ReactDOM","HashRouter","Route","Switch","Register","Main","Login","Provider","store","render","console","log","getState","document","getElementById"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,MAA5B,QAAyC,kBAAzC,C,CAA6D;;AAC7D,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;;AACxC,OAAOC,KAAP,MAAkB,eAAlB,C,CACA;;AAEA,OAAO,yBAAP,C,CAAkC;AAClC;AAEA;AACA;;AACAR,QAAQ,CAACS,MAAT,CACC,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAME,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAN,CADA,EAEC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,WAAZ;AAAwB,EAAA,SAAS,EAAGR,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAEC,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,QAAZ;AAAqB,EAAA,SAAS,EAAGE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFD,EAGC,oBAAC,KAAD;AAAO,EAAA,SAAS,EAAGD,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHD,CADD,CAFD,CADD,EAWIQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAXJ","sourcesContent":["//入口js文件\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter, Route, Switch} from \"react-router-dom\"; //引入路由\nimport Register from \"./containers/register/register\";\nimport Main from \"./containers/main/main\";\nimport Login from \"./containers/login/login\";\n\nimport { Provider } from \"react-redux\"; //引入redux\nimport store from \"./redux/store\";\n// import { PropTypes } from \"prop-types\";\n\nimport \"./assets/css/index.less\"; //有两个子组件都需要这个样式，所以写在这里。\n// import \"./test/socketio_test\"; //项目入口文件引入\n\n//Provider组件只是一个普通的组件。\n//它只需要接受store属性作为参数。它可以作为一个顶层的app容器，将state分发给下面所有被connect的组件。\nReactDOM.render((\n\t<Provider store={store}>\n\t<div>{console.log(store.getState())}</div>\n\t\t<HashRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/register\" component={ Register }></Route>{/*当路径为/register时请求Register组件*/}\n\t\t\t\t<Route path=\"/login\" component={ Login }></Route>{/*当路径为/login时请求Login组件*/}\n\t\t\t\t<Route component={ Main }></Route>{/*没有指定main的路径，那么所有不是上述路径的路由都会先请求main组件，再经过它去请求下一级组件*/}\n\t\t\t</Switch>\n\t\t</HashRouter>\n\t</Provider>\n\t), document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import \"antd-mobile/es/nav-bar/style\";\nimport _NavBar from \"antd-mobile/es/nav-bar\";\nvar _jsxFileName = \"/Users/luofei/recruit_react_app/recruit_react_app/src/containers/main/main.jsx\";\n// 主界面路由组件\nimport React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport DashenInfo from \"../dashen-info/dashen-info.jsx\";\nimport LaobanInfo from \"../laoban-info/laoban-info.jsx\";\nimport { connect } from \"react-redux\";\nimport { getRedirectTo } from \"../../utils\";\nimport Cookies from \"js-cookie\";\nimport { getUser } from \"../../redux/actions\";\nimport Dashen from \"../dashen/dashen\";\nimport Laoban from \"../laoban/laoban\";\nimport Message from \"../message/message\";\nimport Personal from \"../personal/personal\";\nimport NotFound from \"../../components/not-found/not-found\";\nimport NavFooter from \"../../components/nav-footer/nav-footer\";\nimport Chat from \"../chat/chat\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.navList = [//包含所有导航组件的相关数据信息。\n    {\n      path: \"/laoban\",\n      component: Laoban,\n      title: \"大神列表\",\n      icon: \"dashen\",\n      //\n      text: \"大神\"\n    }, {\n      path: \"/dashen\",\n      component: Dashen,\n      title: \"老板列表\",\n      icon: \"laoban\",\n      text: \"老板\"\n    }, {\n      path: \"/message\",\n      component: Message,\n      title: \"消息列表\",\n      icon: \"message\",\n      text: \"消息\"\n    }, {\n      path: \"/personal\",\n      component: Personal,\n      title: \"用户中心\",\n      icon: \"personal\",\n      text: \"个人\"\n    }];\n  }\n\n  //如果登陆过【cookie中有userid】，但还没有登陆【redux管理的user中没有_id】，\n  //则发请求获取对应的user【用componentDidMount生命周期函数来实现】，\n  componentDidMount() {\n    const userid = Cookies.get('userid');\n    const _id = this.props.user._id;\n\n    if (userid && !_id) {\n      //登陆过，所以有userid；现在没有登陆，所以没有_id\n      //发送异步请求，获取user【先写ajax->再写redux->再写这个组件】\n      this.props.getUser(); //不需要传入参数\n    }\n  }\n\n  render() {\n    //读取cookie中userid\n    const userid = Cookies.get('userid'); //如果没有，自动重定向到登陆界面\n\n    if (!userid) {\n      return React.createElement(Redirect, {\n        to: \"/login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    } //如果有，读取redux中的user状态。读取unReadCount状态，用于底部未读信息的显示\n\n\n    const _this$props = this.props,\n          user = _this$props.user,\n          unReadCount = _this$props.unReadCount; //如果redux中user状态里没有_id，不能跳转登陆界面，而是返回一个null，不做任何显示\n\n    if (!user._id) {\n      return null;\n    } else {\n      //如果redux中user状态里有_id，显示对应的界面\n      let path = this.props.location.pathname;\n\n      if (path === '/') {\n        //如果请求根路径，就根据type和header来计算出一个重定向的路径，自动重定向\n        //得到一个重定向的路由路径\n        path = getRedirectTo(user.type, user.header);\n        return React.createElement(Redirect, {\n          to: path,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        });\n      }\n    }\n\n    const navList = this.navList;\n    const path = this.props.location.pathname; //请求的路径\n\n    const currentNav = navList.find(nav => nav.path === path); //数组查找元素用find()方法.navList当中的每一个元素都是一个nav，我们需要对比nav下的path是不是等于当前的path \n    //find()中如果为true，得到首个匹配项。\n\n    if (currentNav) {\n      //决定哪个路由需要隐藏\n      if (user.type === \"laoban\") {\n        //隐藏“dashen”，也就是数组的第二个元素\n        navList[1].hide = true;\n      } else {\n        navList[0].hide = true;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, currentNav ? React.createElement(_NavBar, {\n      className: \"sticky-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, currentNav.title) : null, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, navList.map(nav => React.createElement(Route, {\n      path: nav.path,\n      component: nav.component,\n      key: nav.path,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })) //映射了四个路由\n    , React.createElement(Route, {\n      path: \"/dasheninfo\",\n      component: DashenInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/laobaninfo\",\n      component: LaobanInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/chat/:userid\",\n      component: Chat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Route, {\n      component: NotFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), currentNav ? React.createElement(NavFooter, {\n      navList: navList,\n      unReadCount: unReadCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : null, \" \");\n  }\n\n}\n\nexport default connect(state => ({\n  user: state.user,\n  unReadCount: state.chat.unReadCount\n}), {\n  getUser //将getUser传到当前的UI组件\n\n})(Main);\n/*\n实现自动登录。\n1. componentDidMount()\n\t如果登陆过【cookie中有userid】，但还没有登陆【redux管理的user中没有_id】，则发请求获取对应的user\n2. render()\n\t如果cookie中没有userid，就重定向到login界面;\n\t判断redux管理的user中，是否有_id。如果没有，暂时不做任何显示;\n\t如果有_id，说明已经登陆，显示对应的界面;\n\t如果已经登陆了，那么是进入完善信息的路由，还是进入主界面路由;\n\t如果请求根路径，就根据type和header来计算出一个重定向的路径，自动重定向\n*/","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/containers/main/main.jsx"],"names":["React","Component","Switch","Route","Redirect","DashenInfo","LaobanInfo","connect","getRedirectTo","Cookies","getUser","Dashen","Laoban","Message","Personal","NotFound","NavFooter","Chat","Main","navList","path","component","title","icon","text","componentDidMount","userid","get","_id","props","user","render","unReadCount","location","pathname","type","header","currentNav","find","nav","hide","map","state","chat"],"mappings":"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","sourcesContent":["// 主界面路由组件\n\nimport React,{ Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport DashenInfo from \"../dashen-info/dashen-info.jsx\";\nimport LaobanInfo from \"../laoban-info/laoban-info.jsx\";\nimport { connect } from \"react-redux\";\nimport { getRedirectTo } from \"../../utils\";\nimport Cookies  from \"js-cookie\";\nimport { getUser } from \"../../redux/actions\";\nimport Dashen from \"../dashen/dashen\";\nimport Laoban from \"../laoban/laoban\";\nimport Message from \"../message/message\";\nimport Personal from \"../personal/personal\";\nimport NotFound from \"../../components/not-found/not-found\";\nimport { NavBar } from \"antd-mobile\";\nimport NavFooter from \"../../components/nav-footer/nav-footer\";\nimport Chat from \"../chat/chat\";\n\n\n\nclass Main extends Component{\n\t//不加static是给组件对象添加属性，加static是给组件类添加属性\n\tnavList = [ //包含所有导航组件的相关数据信息。\n\t{\n\t\tpath: \"/laoban\",\n\t\tcomponent: Laoban,\n\t\ttitle: \"大神列表\",\n\t\ticon: \"dashen\", //\n\t\ttext: \"大神\"\n\t},\n\t{\n\t\tpath:\"/dashen\",\n\t\tcomponent: Dashen,\n\t\ttitle: \"老板列表\",\n\t\ticon: \"laoban\",\n\t\ttext: \"老板\"\n\t},\n\t{\n\t\tpath: \"/message\",\n\t\tcomponent: Message,\n\t\ttitle:\"消息列表\",\n\t\ticon: \"message\",\n\t\ttext: \"消息\"\n\t},\n\t{\n\t\tpath: \"/personal\",\n\t\tcomponent: Personal,\n\t\ttitle: \"用户中心\",\n\t\ticon: \"personal\",\n\t\ttext: \"个人\"\n\t}\n\t]\n\t//如果登陆过【cookie中有userid】，但还没有登陆【redux管理的user中没有_id】，\n\t//则发请求获取对应的user【用componentDidMount生命周期函数来实现】，\n\tcomponentDidMount(){\n\t\tconst userid = Cookies.get('userid');\n\t\tconst { _id } = this.props.user;\n\t\tif (userid && !_id) { //登陆过，所以有userid；现在没有登陆，所以没有_id\n\t\t\t//发送异步请求，获取user【先写ajax->再写redux->再写这个组件】\n\t\t\tthis.props.getUser() //不需要传入参数\n\t\t}\n\t}\n\n\trender(){\n\t\t//读取cookie中userid\n\t\tconst userid = Cookies.get('userid');\n\t\t//如果没有，自动重定向到登陆界面\n\t\tif (!userid) {\n\t\t\treturn <Redirect to=\"/login\" />\n\t\t}\n\t\t//如果有，读取redux中的user状态。读取unReadCount状态，用于底部未读信息的显示\n\t\tconst { user, unReadCount } = this.props;\n\t\t//如果redux中user状态里没有_id，不能跳转登陆界面，而是返回一个null，不做任何显示\n\t\tif (!user._id) {\n\t\t\treturn null\n\t\t}else{//如果redux中user状态里有_id，显示对应的界面\n\t\t\tlet path = this.props.location.pathname;\n\t\t\tif (path === '/') {//如果请求根路径，就根据type和header来计算出一个重定向的路径，自动重定向\n\t\t\t\t//得到一个重定向的路由路径\n\t\t\t\tpath = getRedirectTo(user.type, user.header);\n\t\t\t\treturn <Redirect to={path} />\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst  { navList }= this;\n\t\tconst path = this.props.location.pathname;//请求的路径\n\t\tconst currentNav = navList.find(nav => nav.path === path) //数组查找元素用find()方法.navList当中的每一个元素都是一个nav，我们需要对比nav下的path是不是等于当前的path \n\t\t//find()中如果为true，得到首个匹配项。\n\n\n\t\tif (currentNav) {\n\t\t\t//决定哪个路由需要隐藏\n\t\t\tif (user.type === \"laoban\") {\n\t\t\t\t//隐藏“dashen”，也就是数组的第二个元素\n\t\t\t\tnavList[1].hide = true;\n\t\t\t}else{\n\t\t\t\tnavList[0].hide = true;\n\t\t\t}\n\t\t}\n\t\t\n\n\n\t\treturn (<div>\n\t\t\t\t\t{ currentNav ? <NavBar className=\"sticky-header\">{ currentNav.title }</NavBar> : null}\n\t\t\t\t\t<Switch>\n\t\t\t\t\t{\n\t\t\t\t\t\tnavList.map(nav => <Route path={nav.path} component={nav.component} key={nav.path}/>) //映射了四个路由\n\t\t\t\t\t}\n\t\t\t\t\t\t<Route path=\"/dasheninfo\" component={ DashenInfo } />\n\t\t\t\t\t\t<Route path=\"/laobaninfo\" component={ LaobanInfo } />\n\t\t\t\t\t\t<Route path=\"/chat/:userid\" component={ Chat } />\n\t\t\t\t\t\t<Route component={ NotFound } />\n\t\t\t\t\t</Switch>\n\t\t\t\t\t{ currentNav ? <NavFooter navList={navList} unReadCount={unReadCount}/>: null} {/*底部导航单独抽取出来。*/}\n\t\t\t\t</div>)\n\t}\n}\n\nexport default connect(\n\tstate => ({user: state.user, unReadCount: state.chat.unReadCount}),\n\t{ getUser } //将getUser传到当前的UI组件\n\t)(Main)\n\n/*\n实现自动登录。\n1. componentDidMount()\n\t如果登陆过【cookie中有userid】，但还没有登陆【redux管理的user中没有_id】，则发请求获取对应的user\n2. render()\n\t如果cookie中没有userid，就重定向到login界面;\n\t判断redux管理的user中，是否有_id。如果没有，暂时不做任何显示;\n\t如果有_id，说明已经登陆，显示对应的界面;\n\t如果已经登陆了，那么是进入完善信息的路由，还是进入主界面路由;\n\t如果请求根路径，就根据type和header来计算出一个重定向的路径，自动重定向\n*/\n\n"]},"metadata":{},"sourceType":"module"}
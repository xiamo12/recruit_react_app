{"ast":null,"code":"import _defineProperty from \"/Users/luofei/recruit_react_app/recruit_react_app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// 包含多个reducer函数，根据老的state和指定的action返回新的state\n//rudux是基于action的触发机制，通过dispatch对应的action来修改状态，而状态的修改又统一通过reducer来进行\nimport { combineReducers } from \"redux\";\nimport { AUTH_SUCCESS, ERROR_MSG, RECEIVE_USER, RESET_USER, RECEIVE_USER_LIST, RECEIVE_MSG_LIST, RECEIVE_MSG, MSG_READ } from \"./action-types\";\nimport { getRedirectTo } from \"../utils\";\nconst initUser = {\n  username: \"\",\n  //用户名\n  type: \"dashen\",\n  //用户类型。不需要初始化密码，因为密码不会被后台返回\n  msg: \"\",\n  //错误提示信息\n  redirectTo: \"\" //定义一个需要自动重定向的路由路径\n  //产生user状态的reducer\n\n};\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    case AUTH_SUCCESS:\n      //data是user\n      const _action$data = action.data,\n            type = _action$data.type,\n            header = _action$data.header;\n      return _objectSpread({}, action.data, {\n        redirectTo: getRedirectTo(type, header) //成功的状态下重定向到主页面\n\n      });\n\n    case ERROR_MSG:\n      //data是msg\n      return _objectSpread({}, state, {\n        msg: action.data //失败时返回失败信息\n\n      });\n\n    case RECEIVE_USER:\n      return action.data;\n    //成功的状态下重定向到主页面\n\n    case RESET_USER:\n      //重置用户，跳转到登陆界面\n      return _objectSpread({}, initUser, {\n        msg: action.data //失败时返回失败信息\n\n      });\n\n    default:\n      return state;\n  }\n} //产生userlist状态的reducer\n\n\nconst initUserList = [];\n\nfunction userList(state = initUserList, action) {\n  switch (action.type) {\n    case RECEIVE_USER_LIST:\n      //data为userList\n      return action.data;\n\n    default:\n      return state;\n  }\n} //产生聊天状态的reducer\n\n\nconst initChat = {\n  users: {},\n  //包含所有用户信息的对象；属性名：userid，属性值是：{username,header}\n  chatMsgs: [],\n  //当前用户所有message相关的数组\n  unReadCount: 0 //总的未读数量\n\n};\n\nfunction chat(state = initChat, action) {\n  switch (action.type) {\n    case RECEIVE_MSG_LIST:\n      //data: {users, chatMsgs}\n      const _action$data2 = action.data,\n            users = _action$data2.users,\n            chatMsgs = _action$data2.chatMsgs,\n            userid = _action$data2.userid;\n      return {\n        users,\n        chatMsgs,\n        unReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to === userid ? 1 : 0), 0) //return的结构必须是上述initChat的结构\n\n      };\n\n    case RECEIVE_MSG:\n      //返回的data是chatMsg\n      const chatMsg = action.data.chatMsg; //之前这里的chatMsg写了{}，导致运行报错。什么时候该加{}，什么时候不加？？\n\n      return {\n        users: state.users,\n        chatMsgs: [...state.chatMsgs, chatMsg],\n        unReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to === action.data.userid ? 1 : 0) //判断是不是别人发给我的消息\n\n      };\n\n    case MSG_READ:\n      const _action$data3 = action.data,\n            from = _action$data3.from,\n            to = _action$data3.to,\n            count = _action$data3.count;\n      state.chatMsgs.forEach(msg => {\n        if (msg.from === from && msg.to === to & !msg.read) {\n          msg.read = true;\n        }\n      });\n      return {\n        users: state.users,\n        chatMsgs: state.chatMsgs.map(msg => {\n          if (msg.from === from && msg.to === to && !msg.read) {\n            //需要更新\n            return _objectSpread({}, msg, {\n              read: true\n            });\n          } else {\n            //不需要更新\n            return msg;\n          }\n        }),\n        unReadCount: state.unReadCount - count\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  user,\n  userList,\n  chat\n}); //向外暴露的项目结构{ user: {}, userList:[], chat:{} }","map":{"version":3,"sources":["/Users/luofei/recruit_react_app/recruit_react_app/src/redux/reducers.js"],"names":["combineReducers","AUTH_SUCCESS","ERROR_MSG","RECEIVE_USER","RESET_USER","RECEIVE_USER_LIST","RECEIVE_MSG_LIST","RECEIVE_MSG","MSG_READ","getRedirectTo","initUser","username","type","msg","redirectTo","user","state","action","data","header","initUserList","userList","initChat","users","chatMsgs","unReadCount","chat","userid","reduce","preTotal","read","to","chatMsg","from","count","forEach","map"],"mappings":";;;;;;AAAA;AACA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SACCC,YADD,EAECC,SAFD,EAGCC,YAHD,EAICC,UAJD,EAKCC,iBALD,EAMCC,gBAND,EAOCC,WAPD,EAQCC,QARD,QASU,gBATV;AAUA,SAASC,aAAT,QAA8B,UAA9B;AAEA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AACF;AACdC,EAAAA,IAAI,EAAE,QAFU;AAED;AACfC,EAAAA,GAAG,EAAE,EAHW;AAGP;AACTC,EAAAA,UAAU,EAAE,EAJI,CAID;AAGhB;;AAPiB,CAAjB;;AAQA,SAASC,IAAT,CAAcC,KAAK,GAACN,QAApB,EAA8BO,MAA9B,EAAqC;AACpC,UAAQA,MAAM,CAACL,IAAf;AACC,SAAKX,YAAL;AAAmB;AAAnB,2BACyBgB,MAAM,CAACC,IADhC;AAAA,YACSN,IADT,gBACSA,IADT;AAAA,YACcO,MADd,gBACcA,MADd;AAEC,+BAAYF,MAAM,CAACC,IAAnB;AAAyBJ,QAAAA,UAAU,EAAEL,aAAa,CAACG,IAAD,EAAOO,MAAP,CAAlD,CAAkE;;AAAlE;;AACD,SAAKjB,SAAL;AAAiB;AAChB,+BAAYc,KAAZ;AAAmBH,QAAAA,GAAG,EAACI,MAAM,CAACC,IAA9B,CAAoC;;AAApC;;AACD,SAAKf,YAAL;AACC,aAAOc,MAAM,CAACC,IAAd;AAAmB;;AACpB,SAAKd,UAAL;AAAkB;AACjB,+BAAYM,QAAZ;AAAsBG,QAAAA,GAAG,EAACI,MAAM,CAACC,IAAjC,CAAuC;;AAAvC;;AACD;AACC,aAAOF,KAAP;AAXF;AAaA,C,CACD;;;AACA,MAAMI,YAAY,GAAG,EAArB;;AACA,SAASC,QAAT,CAAkBL,KAAK,GAACI,YAAxB,EAAsCH,MAAtC,EAA6C;AAC5C,UAAOA,MAAM,CAACL,IAAd;AACC,SAAKP,iBAAL;AAAwB;AACvB,aAAOY,MAAM,CAACC,IAAd;;AACD;AACC,aAAOF,KAAP;AAJF;AAMA,C,CAED;;;AACA,MAAMM,QAAQ,GAAG;AAChBC,EAAAA,KAAK,EAAE,EADS;AACL;AACXC,EAAAA,QAAQ,EAAE,EAFM;AAEF;AACdC,EAAAA,WAAW,EAAE,CAHG,CAGD;;AAHC,CAAjB;;AAKA,SAASC,IAAT,CAAcV,KAAK,GAACM,QAApB,EAA8BL,MAA9B,EAAqC;AACpC,UAAOA,MAAM,CAACL,IAAd;AACC,SAAKN,gBAAL;AAAuB;AAAvB,4BACqCW,MAAM,CAACC,IAD5C;AAAA,YACSK,KADT,iBACSA,KADT;AAAA,YACgBC,QADhB,iBACgBA,QADhB;AAAA,YAC0BG,MAD1B,iBAC0BA,MAD1B;AAEC,aAAQ;AACPJ,QAAAA,KADO;AAEPC,QAAAA,QAFO;AAGPC,QAAAA,WAAW,EAAED,QAAQ,CAACI,MAAT,CAAgB,CAACC,QAAD,EAAWhB,GAAX,KAAmBgB,QAAQ,IAAI,CAAChB,GAAG,CAACiB,IAAL,IAAajB,GAAG,CAACkB,EAAJ,KAASJ,MAAtB,GAA+B,CAA/B,GAAmC,CAAvC,CAA3C,EAAsF,CAAtF,CAHN,CAIP;;AAJO,OAAR;;AAKD,SAAKpB,WAAL;AAAkB;AAAlB,YACQyB,OADR,GACmBf,MAAM,CAACC,IAD1B,CACQc,OADR,EACgC;;AAC/B,aAAO;AACNT,QAAAA,KAAK,EAAEP,KAAK,CAACO,KADP;AAENC,QAAAA,QAAQ,EAAE,CAAC,GAAGR,KAAK,CAACQ,QAAV,EAAoBQ,OAApB,CAFJ;AAGNP,QAAAA,WAAW,EAAET,KAAK,CAACS,WAAN,IAAqB,CAACO,OAAO,CAACF,IAAT,IAAiBE,OAAO,CAACD,EAAR,KAAad,MAAM,CAACC,IAAP,CAAYS,MAA1C,GAAmD,CAAnD,GAAuD,CAA5E,CAHP,CAGsF;;AAHtF,OAAP;;AAKD,SAAKnB,QAAL;AAAA,4BAC2BS,MAAM,CAACC,IADlC;AAAA,YACQe,IADR,iBACQA,IADR;AAAA,YACcF,EADd,iBACcA,EADd;AAAA,YACkBG,KADlB,iBACkBA,KADlB;AAEClB,MAAAA,KAAK,CAACQ,QAAN,CAAeW,OAAf,CAAuBtB,GAAG,IAAG;AAC5B,YAAIA,GAAG,CAACoB,IAAJ,KAAWA,IAAX,IAAiBpB,GAAG,CAACkB,EAAJ,KAASA,EAAT,GAAY,CAAClB,GAAG,CAACiB,IAAtC,EAA4C;AAC3CjB,UAAAA,GAAG,CAACiB,IAAJ,GAAW,IAAX;AACA;AACD,OAJD;AAKA,aAAO;AACNP,QAAAA,KAAK,EAAEP,KAAK,CAACO,KADP;AAENC,QAAAA,QAAQ,EAAER,KAAK,CAACQ,QAAN,CAAeY,GAAf,CAAmBvB,GAAG,IAAI;AACnC,cAAIA,GAAG,CAACoB,IAAJ,KAAaA,IAAb,IAAmBpB,GAAG,CAACkB,EAAJ,KAASA,EAA5B,IAAgC,CAAClB,GAAG,CAACiB,IAAzC,EAA+C;AAAE;AAChD,qCAAWjB,GAAX;AAAgBiB,cAAAA,IAAI,EAAE;AAAtB;AACA,WAFD,MAEK;AAAC;AACL,mBAAOjB,GAAP;AACA;AACD,SANS,CAFJ;AASNY,QAAAA,WAAW,EAAET,KAAK,CAACS,WAAN,GAAoBS;AAT3B,OAAP;;AAWD;AACA,aAAOlB,KAAP;AAlCD;AAoCA;;AACD,eAAehB,eAAe,CAAC;AAAEe,EAAAA,IAAF;AAAQM,EAAAA,QAAR;AAAkBK,EAAAA;AAAlB,CAAD,CAA9B,C,CAEA","sourcesContent":["// 包含多个reducer函数，根据老的state和指定的action返回新的state\n//rudux是基于action的触发机制，通过dispatch对应的action来修改状态，而状态的修改又统一通过reducer来进行\nimport { combineReducers } from \"redux\";\nimport { \n\tAUTH_SUCCESS, \n\tERROR_MSG, \n\tRECEIVE_USER, \n\tRESET_USER, \n\tRECEIVE_USER_LIST,\n\tRECEIVE_MSG_LIST,\n\tRECEIVE_MSG,\n\tMSG_READ\n\t  } from \"./action-types\";\nimport { getRedirectTo } from \"../utils\";\n\nconst initUser = {\n\tusername: \"\", //用户名\n\ttype: \"dashen\",//用户类型。不需要初始化密码，因为密码不会被后台返回\n\tmsg: \"\", //错误提示信息\n\tredirectTo: \"\" //定义一个需要自动重定向的路由路径\n}\n\n//产生user状态的reducer\nfunction user(state=initUser, action){\n\tswitch (action.type){\n\t\tcase AUTH_SUCCESS: //data是user\n\t\t\tconst { type,header } = action.data;\n\t\t\treturn { ...action.data, redirectTo: getRedirectTo(type, header)} //成功的状态下重定向到主页面\n\t\tcase ERROR_MSG:  //data是msg\n\t\t\treturn { ...state, msg:action.data} //失败时返回失败信息\n\t\tcase RECEIVE_USER: \n\t\t\treturn action.data //成功的状态下重定向到主页面\n\t\tcase RESET_USER:  //重置用户，跳转到登陆界面\n\t\t\treturn { ...initUser, msg:action.data} //失败时返回失败信息\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n//产生userlist状态的reducer\nconst initUserList = [];\nfunction userList(state=initUserList, action){\n\tswitch(action.type){\n\t\tcase RECEIVE_USER_LIST: //data为userList\n\t\t\treturn action.data\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n//产生聊天状态的reducer\nconst initChat = {\n\tusers: {}, //包含所有用户信息的对象；属性名：userid，属性值是：{username,header}\n\tchatMsgs: [], //当前用户所有message相关的数组\n\tunReadCount: 0 //总的未读数量\n}\nfunction chat(state=initChat, action){\n\tswitch(action.type){\n\t\tcase RECEIVE_MSG_LIST: //data: {users, chatMsgs}\n\t\t\tconst { users, chatMsgs, userid } = action.data;\n\t\t\treturn  {\n\t\t\t\tusers,\n\t\t\t\tchatMsgs,\n\t\t\t\tunReadCount: chatMsgs.reduce((preTotal, msg) => preTotal + (!msg.read && msg.to===userid ? 1 : 0), 0)\n\t\t\t}//return的结构必须是上述initChat的结构\n\t\tcase RECEIVE_MSG: //返回的data是chatMsg\n\t\t\tconst {chatMsg} = action.data; //之前这里的chatMsg写了{}，导致运行报错。什么时候该加{}，什么时候不加？？\n\t\t\treturn {\n\t\t\t\tusers: state.users,\n\t\t\t\tchatMsgs: [...state.chatMsgs, chatMsg],\n\t\t\t\tunReadCount: state.unReadCount + (!chatMsg.read && chatMsg.to===action.data.userid ? 1 : 0) //判断是不是别人发给我的消息\n\t\t\t}\n\t\tcase MSG_READ:\n\t\t\tconst {from, to, count} = action.data;\n\t\t\tstate.chatMsgs.forEach(msg =>{\n\t\t\t\tif (msg.from===from&&msg.to===to&!msg.read) {\n\t\t\t\t\tmsg.read = true\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn {\n\t\t\t\tusers: state.users,\n\t\t\t\tchatMsgs: state.chatMsgs.map(msg => {\n\t\t\t\t\tif (msg.from === from&&msg.to===to&&!msg.read) { //需要更新\n\t\t\t\t\t\treturn {...msg, read: true}\n\t\t\t\t\t}else{//不需要更新\n\t\t\t\t\t\treturn msg\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tunReadCount: state.unReadCount - count\t\t\t\t\n\t\t\t}\n\t\tdefault:\n\t\treturn state;\n\t}\n}\nexport default combineReducers({ user, userList, chat });\n\n//向外暴露的项目结构{ user: {}, userList:[], chat:{} }\n\n\n\n"]},"metadata":{},"sourceType":"module"}